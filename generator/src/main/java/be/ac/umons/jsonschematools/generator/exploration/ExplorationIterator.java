package be.ac.umons.jsonschematools.generator.exploration;

import java.util.Iterator;

import org.json.JSONException;
import org.json.JSONObject;

import be.ac.umons.jsonschematools.JSONSchema;
import be.ac.umons.jsonschematools.JSONSchemaException;

/**
 * An iterator over the documents that are generated by
 * {@link ExplorationGenerator}.
 * 
 * @author GaÃ«tan Staquet
 */
class ExplorationIterator implements Iterator<JSONObject> {

    private final JSONSchema schema;
    private final ChoicesSequence choices = new ChoicesSequence();
    private final ExplorationGenerator generator;
    private final int maxDocumentDepth;
    private final boolean canGenerateInvalid;
    private JSONObject nextDocument = null;

    ExplorationIterator(JSONSchema schema, int maxDocumentDepth, boolean canGenerateInvalid,
            ExplorationGenerator generator) {
        this.schema = schema;
        this.generator = generator;
        this.maxDocumentDepth = maxDocumentDepth;
        this.canGenerateInvalid = canGenerateInvalid;
        computeNextDocument();
    }

    @Override
    public boolean hasNext() {
        return nextDocument != null;
    }

    @Override
    public JSONObject next() {
        JSONObject document = nextDocument;
        computeNextDocument();
        return document;
    }

    @Override
    public String toString() {
        return this.choices.toString();
    }

    private void computeNextDocument() {
        if (choices.containsChoiceWithNextValue()) {
            try {
                nextDocument = generator.generateDocument(schema, maxDocumentDepth, canGenerateInvalid, choices);
            } catch (JSONException | JSONSchemaException e) {
                e.printStackTrace();
                nextDocument = null;
            }
        } else {
            nextDocument = null;
        }
    }
}
